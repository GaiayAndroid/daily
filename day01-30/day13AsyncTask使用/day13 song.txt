<一> AsyncTask使用场景
（1）需要起新的线程，在后台进行耗时操作，耗时操作结束后通知主线程（结束后更新UI）。
（2）需要起新的线程，在后台进行耗时操作，期间不断通知主线程（更新处理进度）。

<二> AsyncTask缺陷
(1)最大数量缺陷：AsyncTask中CORE_POOL_SIZE=5 ,MAXIMUM_POOL_SIZE =128 ,KEEP_ALIVE =1,LinkedBlockingQueue的size=10。表示：1.正在工作的线程小于5的时候，会创建新的工作线程。
	       2.正在工作的线程已经超过5个了，再次执行异步任务将会放在缓冲队列中等待。
	       3.正在工作的线程已经超过5个了，并且缓冲队列中的任务超过10，将会从容量为128的线程池中新开线程执行。
	       4.正在工作的线程已经超过128个，缓冲队列已满，再次增加任务，将会抛出异常RejectedExcutionException.
  缺陷：线程过多，频繁切换线程导致消耗系统资源。超过承受的最大值会抛出异常。
  解决：用一个控制线程来判断线程池是否已满，满了则线程睡眠(等待处理)，否则交由AsyncTask处理。

(2)AsyncTask生命周期与Activity（Fragment）的生命周期不一致缺陷：
缺陷一:在Activity结束后，AsyncTask可能还在后台运行，导致内存泄漏。    
解决：在Activity结束前调用AsyncTask.cancel(),但是这种方式针对一些不可中断的操作是无效的（比如：BitmapFactory.decodeStream()）,即使调用cancel()操作也会继续执行。因此对于可中断的操作调用AsyncTask.cancel()。对于不可中断的操作，使Activity等待操作结束再销毁。

缺陷二：当Activity在后台被杀死或者屏幕旋转的情况会导致Activity重建，而正在执行的AsyncTask会持有销毁之前的Activity（原Activity处于泄漏的状态），这时候onPostExecute()会在原Activity中执行，导致结果无法展示。
解决：屏幕旋转问题：通过配置Activity的ConfigChanges在屏幕旋转的时候不重新创建Activity。
      Activity后台回收：尽量对一些操作做非空判断，避免出现空指针。
