package com.zc.constrainttest;

import org.junit.Test;

/**
 * Created by zc on 2017/3/14.
 */

public class Test14 {
    /**
     *  负数 换算成二进制后为：- 5 ---- 0101 取反加1为1011
     * 按位与( & )：第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0
     * 按位或( | )：第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
     * 位异或( ^ ): 第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
     * 位非( ~ )  ：操作数的第n位为1，那么结果的第n位为0，反之为1。
     */
    @Test
    public void test3_14(){
        //按位与  1001 & 0101 = 0001   1
        //1001
        //0101
        //0001  1
        System.out.println("9&5 =" + (9&5));
        // 按位或   1001 & 0101 = 1101   13
        // 1001
        // 0101
        // 1101   13
        System.out.println("9|5 =" + (9|5));
        //位异或( ^ ) 第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
        //1001
        //0101
        //1100   12
        System.out.println("9^5 =" + (9^5));
        // 位非( ~ )操作数的第n位为1，那么结果的第n位为0，反之。
        // 0000 0000 0000 0000 0000 0000 0000 1001
        // 1111 1111 1111 1111 1111 1111 1111 0110
        // 先取反码，再补码
        // 1111 1111 1111 1111 1111 1111 1111 0110
        // 0000 0000 0000 0000 0000 0000 0000 1001   取反
        // 0000 0000 0000 0000 0000 0000 0000 1010   补码 -10
        System.out.println("~9 =" + (~9));
        //0101
        //1010 先取反码
        //1011 再补码 加1    -5
        //0100 位非   4
        System.out.println("~-5 = " + (~-5));
        //左移移 3<<4  左移4位   低位补0
        //0011 <<4   0011 0000   = 32+16=48
        System.out.println("3<<4 =" + (3<<4));
        //右移 32>>3   右移3位，高位补0
        //0010 0000  >>3   0010 0   4
        System.out.println("32>>3 =" + (32>>3));
        //0010 0001  >>3   0010 0   4
        System.out.println("33>>3 =" + (33>>3));
        System.out.println("4>>32 =" + (4>>32));
        System.out.println("4>>0 =" + (4>>0));

    }

    /**
     * x和y交换数值
     */
    @Test
    public void test3_14_2(){
        int x = 3;
        int y = 4;
        x ^= y;
        y ^= x;
        x ^= y;

        System.out.println("x ^= y " + (x ^= y) + ",x = " + x);
        System.out.println("y ^= x " + (y ^= x) + ", y = " + y);
        System.out.println("x ^= y " + (x ^= y) + ",x = " + x);
    }
}
